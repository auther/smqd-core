# Copyright 2018 UANGEL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

smqd {
  include "smqd-core-version.conf"

  # the name of this node, should be unique
  node_name = "smqd-01"

  # ActorSystem name
  actor_system_name = smqd

  # this section is used only when akka.actor.provider=cluster
  cluster {
    # the method to look for seed nodes
    discovery = static # static | etcd
    discovery_timeout = 5s

    static {
      seeds = ["127.0.0.1:2551"]
    }

    etcd {
      server = "http://127.0.0.1:2379"
      prefix = /smqd/cluster/seeds
      node_ttl = 1m
    }
  }

  tls {
    storetype = jks
    keystore = smqd-server.jks
    storepass = smqd.demo.key
    keypass = smqd.demo.key
  }

  # delegates that can change how sqmd works
  delegates {
    authentication = com.thing2x.smqd.impl.DefaultAuthDelegate
    sessionstore = com.thing2x.smqd.impl.DefaultSessionStoreDelegate
    registry = com.thing2x.smqd.impl.DefaultRegistryDelegate
  }

  registry {
    verbose = false

    # regular expression for mqtt client id to validate format
    # this client id should be compatible with akka actor naming rule which is
    # Actor paths MUST: not start with `$`, include only ASCII letters and can only contain these special characters: -_.*$+:@&=,!~';.
    #
    # for compatibility with actor name, client id can not start with _ and $
    client.identifier.format = "[0-9a-zA-Z-.*+:@&=,!~';.]+[0-9a-zA-Z-_*$%?+:@&=,!~';./]*"
  }

  router {
    verbose = false
  }

  plugin {
    dir = "plugin"
    # manifest = "file://<path to manifest file>" or "http://<uri to download manifest file>"
  }

  # bridge settings, no bridge by default
  bridge {
    drivers = [ ]
    bridges = [ ]
  }

  # service component list, user can add custom service compoent class that extends com.thing2x.smqd.Service interface
  services = [core-fault, core-protocol]

  core-fault {
    entry.plugin = thing2x-core-fault-logger
  }

  core-protocol {
    entry.plugin = thing2x-core-protocol-logger
    config {
      coloring = false
    }
  }

  core-mqtt {
    entry.plugin = thing2x-core-mqtt
  }

  core-api {
    entry.plugin = thing2x-core-http
    config {
      -.smqd.api = true # don't use or override "-." prefixed fields, its all reserved for smqd internal use
      -.smqd.prefix = /api/v1/
      local {
        enabled = true
        address = 127.0.0.1
        bind.address = 0.0.0.0
        port = 8080
        bind.port = 8080
      }

      local.secure {
        enabled = false
        address = 127.0.0.1
        bind.address = 0.0.0.0
        port = 8443
        bind.port = 8443
      }

      routes {
        admin {
          prefix = admin
          class = com.thing2x.smqd.rest.api.AdminController
        }

        management {
          prefix = api/v1/management
          class = com.thing2x.smqd.rest.api.MgmtController
        }

        plugin {
          prefix = api/v1/management
          class = com.thing2x.smqd.rest.api.PluginController
        }

        metric {
          prefix = api/v1/metrics
          class = com.thing2x.smqd.rest.api.MetricController
        }

        route {
          prefix = api/v1/routes
          class = com.thing2x.smqd.rest.api.RouteController
        }

        client {
          prefix = api/v1/clients
          class = com.thing2x.smqd.rest.api.ClientController
        }
      }
    }
  }

  ahc_ws_client {
    connection_timeout = 2m
    idle_timeout = 2m
    request_timeout = 2m
    follow_redirects = true
    use_proxy_properites = true
    user_agent = "smqd http client"
    compression_enabled = false
  }
}

# smqd is using akka as foundation
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = off
  log-dead-letters-during-shutdown = off

  actor {
    provider = local

    serializers {
      java = "akka.serialization.JavaSerializer"
      smq = "com.thing2x.smqd.SmqSerializer"
    }
    serialization-bindings {
      "com.thing2x.smqd.RoutableMessage" = smq
      "io.netty.buffer.ByteBuf" = smq
      "com.thing2x.smqd.FilterPath" = smq
      "com.thing2x.smqd.SmqdRoute" = java
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = 127.0.0.1
      port = 2551
      bind-hotname = 0.0.0.0
      port = 2551
    }
  }

  http {
    server {
      verbose-error-messages = on
    }
  }
}
