# Copyright 2018 UANGEL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

smqd {
  include "smqd-core-version.conf"

  # the name of this node, should be unique
  node_name = "smqd-01"

  # ActorSystem name
  actor_system_name = smqd

  # this section is used only when akka.actor.provider=cluster
  cluster {
    # the method to look for seed nodes
    discovery = static # static | etcd
    discovery_timeout = 5s

    static {
      seeds = ["127.0.0.1:2551"]
    }

    etcd {
      server = "http://127.0.0.1:2379"
      prefix = /smqd/cluster/seeds
      node_ttl = 1m
    }
  }

  tls {
    storetype = jks
    keystore = smqd-server.jks
    storepass = smqd.demo.key
    keypass = smqd.demo.key
  }

  # delegates that can change how sqmd works
  delegates {
    authentication = t2x.smqd.impl.DefaultAuthDelegate
    sessionstore = t2x.smqd.impl.DefaultSessionStoreDelegate
    registry = t2x.smqd.impl.DefaultRegistryDelegate
  }

  # bridge settings, no bridge by default
  bridge {
    drivers = [ ]
    bridges = [ ]
  }

  # service component list, user can add custom service compoent class that extends t2x.smqd.Service interface
  services = [core-fault, core-protocol]

  core-fault {
    entry.class = t2x.smqd.fault.DefaultFaultListener
    subscribe.topic = "$local/$SYS/faults/#"
  }

  core-protocol {
    entry.class = t2x.smqd.protocol.DefaultProtocolListener
    subscribe.topic = "$local/$SYS/protocols/#"
    coloring = false
  }

  core-mqtt {
    entry.class = t2x.smqd.net.mqtt.MqttService

    local {
      enabled = true
      address = 0.0.0.0
      port = 1883
    }

    local.secure {
      enabled = false
      address = 0.0.0.0
      port = 4883
    }

    ws {
      enabled = true
      address = 0.0.0.0
      port = 8086
    }

    ws.secure {
      enabled = false
      address = 0.0.0.0
      port = 8083
    }

    throttle {
      channel {
        enabled = false
        read.size = 1M
        read.count = 0

        check.interval = 30s
        wait.max = 5s
      }
    }

    leak.detector.level = DISABLED  # DISABLED, SIMPLE, ADVANCED, PARANOID
    message.max.size = 4M
    keepalive.time = 1m

    # regular expression for mqtt client id to validate format
    # this client id should be compatible with akka actor naming rule which is
    # Actor paths MUST: not start with `$`, include only ASCII letters and can only contain these special characters: -_.*$+:@&=,!~';.
    #
    # for compatibility with actor name, client id can not start with _ and $
    client.identifier.format = "[0-9a-zA-Z-.*+:@&=,!~';.]+[0-9a-zA-Z-_*$%?+:@&=,!~';./]*"

    thread {
      master.count = 2
      worker.count = 4
    }
  }

  core-api {
    entry.class = t2x.smqd.net.http.HttpService

    local {
      enabled = true
      address = 0.0.0.0
      port = 8080
    }

    local.secure {
      enabled = false
      address = 0.0.0.0
      port = 8443
    }

    routes {
      admin {
        prefix = admin
        class = t2x.smqd.rest.AdminController
      }

      management {
        prefix = api/v1/management
        class = t2x.smqd.rest.MgmtController
      }

      metrics {
        prefix = api/v1/metrics
        class = t2x.smqd.rest.MetricController
      }

      routes {
        prefix = api/v1/routes
        class = t2x.smqd.rest.RoutesController
      }
    }
  }
}

# smqd is using akka as foundation
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = off
  log-dead-letters-during-shutdown = off

  actor {
    provider = local

    serializers {
      java = "akka.serialization.JavaSerializer"
      smq = "t2x.smqd.SmqSerializer"
    }
    serialization-bindings {
      "t2x.smqd.RoutableMessage" = smq
      "io.netty.buffer.ByteBuf" = smq
      "t2x.smqd.FilterPath" = smq
      "t2x.smqd.SmqdRoute" = java
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = 127.0.0.1
      port = 2551
      bind-hotname = 0.0.0.0
      port = 2551
    }
  }

  http {
    server {
      verbose-error-messages = on
    }
  }
}
