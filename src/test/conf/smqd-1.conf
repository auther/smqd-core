
smqd {

  node_name = "test-01"
  actor_system_name = "core-test"

  cluster {
    discovery = static

    static {
      seeds = ["127.0.0.1:2551"]
    }

    etcd {
      server = "http://127.0.0.1:2379"
      prefix = /smqd/cluster/seeds
      node_ttl = 1m
    }
  }

  tls {
    storetype = jks
    keystore = src/test/tls/keygen/smqd-server.jks
    storepass = smqd.demo.key
    keypass = smqd.demo.key
  }

  registry {
    verbose = true
  }

  router {
    verbose = true
    blind_routing_threshold = 5
    # majority | local | all | <integer>
    write_consistency_level = local
    write_consistency_timeout = 1s
    # majority | local | all | <integer>
    read_consistency_level = local
    read_consistency_timeout = 1s
  }

  plugin {
    dir = "src/test/plugins"
    manifest = "src/test/conf/smqd-plugins-manifest-custom.conf"
  }

  services = [core-fault, core-protocol, core-mqtt, core-api, health, core-telnetd]

  core-protocol {
    config {
      coloring = true
    }
  }

  core-mqtt {
    config {
      leak.detector.level = PARANOID

      local {
        enabled = true
        address = 0.0.0.0
        port = 1883
      }

      local.secure {
        enabled = true
        address = 0.0.0.0
        port = 4883
      }

      ws {
        enabled = true
        address = 0.0.0.0
        port = 8086
      }

      ws.secure {
        enabled = true
        address = 0.0.0.0
        port = 8083
      }
    }
  }

  core-api {

    config {
      oauth2 {
        simulation_mode = false
        simulation_identifier = admin
      }

      local {
        enabled = true
        address = 127.0.0.1
        bind.address = 0.0.0.0
        port = 8080
      }

      local.secure {
        enabled = true
        address = 127.0.0.1
        bind.address = 0.0.0.0
        port = 8443
      }

      statics = [
        {
          name = "dashboard"
          prefix = ""
          resource = "target/dashbaord.zip"
        }
      ]
    }
  }

  health {
    entry.class = "com.thing2x.smqd.util.HealthChecker"

    config = {
      check_list = [
        {
          name = demo
          command = "ls -l ."
          expect_exit = 0
          interval = 3 seconds
        }
      ]
    }
  }

  core-telnetd {
    config {
      telnet {
        default_listener.port = 6623
      }

      script.path = [
        "src/main/resources/bsh",
        "src/test/script"
      ]
    }
  }
}

akka {
  actor.provider = cluster

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = 127.0.0.1
      port = 2551
    }
  }
}